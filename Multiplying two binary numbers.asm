INCLUDE "EMU8086.INC"

.MODEL SMALL
.STACK 100H   

.DATA 

A DW ?
B DW ?
C DW ?

FLAG DB 0	;FLAG TO SKIP THE STARTING ZEROS IN OUTPUT  

.CODE

MAIN PROC
	
	MOV AX, @DATA
	MOV DS, AX
	
	
	;INITIALIZING VARIABLES
	
	MOV A, 101010B	;MULTIPLICAND
	MOV B, 110011B  ;MULTIPLIER
	
	MOV C, 0D	;RESULT
	
	MOV BX, A	;STORING THE VALUE OF A IN BX FOR LATER USE 
	
	
	;MULTIPLICATION OPERATION
	
	MOV CX, 16
	
	MULTIPLY:
	
	ROR B, 1	;GETTING THE LSB OF THE MULTIPLIER IN CARRY AS CURRENT MULTIPLIER BIT
	
	JC CARRY	;CHECKING IF CURRENT MULTIPLIER BIT IS 1
	
	SHL BX, 1	;IF CURRENT MULTIPLIER BIT IS 0, JUST LEFT SHIFTING THE VALUE OF BX BY 1 BIT
	
	JMP SKIP
	
	CARRY:
	
	ADD C, BX	;IF CURRENT MULTIPLIER BIT IS 1, ADDING THE VALUE OF BX TO RESULT
	SHL BX, 1	;THEN LEFT SHIFTING THE VALUE OF BX BY 1 BIT
	
	SKIP:
	LOOP MULTIPLY
	BREAK:
	
	
	;DISPLAYING RESULT
	
	MOV CX, 16
	MOV AH, 2
	
	OUTPUT:
	
	MOV DX, 0	;CLEARING DX RESISTER
	
	ROL C, 1
	
	JC CARRY2
	JMP NO_CARRY2
	
	CARRY2:
	MOV DX, 1	;SETTING VALUE OF DX TO 1 IF THERE'S CARRY
	
	NO_CARRY2: 
	
	CMP FLAG, 1
	JE DISPLAY
		
	CMP DL, 0
	JE SKIP_ZERO
	
	MOV FLAG, 1	;SETTING FLAG TO 1 AFTER FIRST 1 IS FOUND
    
    DISPLAY:
	
	ADD DX, 48	;CONVERTING VALUE TO THE ASCII VALUE OF THE DESIRED CHARACHTER
	
	INT 21H
	
	SKIP_ZERO:
	
	LOOP OUTPUT

    
    RETURN_0:
 
    MOV AH, 4CH
    INT 21H
	MAIN ENDP
    
END MAIN
                